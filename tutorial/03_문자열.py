#==============================================================================
# 문자열은 단일값으로 저장되지만 각 문자에 접근할수 있다
# 문자열에는 다양한 함수를 사용할수 있다
#==============================================================================

#==============================================================================
#                           문자열 인덱스
#------------------------------------------------------------------------------
# 인덱스는 제일 왼쪽문자부터 0,1,2,3...식으로 부여
# 오른쪽 문자부터 -1, -2, -3 ....으로도 사용 가능
#------------------------------------------------------------------------------
s = "hello"
print("="*20,"문자열 인덱스 접근","="*20)
print(f"s : {s}")
print("-"*50)
print("s[0] :",s[0],"\ts[-5]",s[-5])
print("s[1] :",s[1],"\ts[-4]",s[-4])
print("s[2] :",s[2],"\ts[-3]",s[-3])
print("s[3] :",s[3],"\ts[-2]",s[-2])
print("s[4] :",s[4],"\ts[-1]",s[-1])
print("="*50)
#==============================================================================
print()
#==============================================================================
#                            대문자와 소문자 함수
#------------------------------------------------------------------------------
# upper() : 소문자를 대문자로 변환
# lower() : 대문자를 소문자로 변환
# swapcase() : 대문자는 소문자로, 소문자는 대문자로 변환
# title() : 단어 앞 글자만 대문자로 단어 중간 대문자는 소문자로 변환
#------------------------------------------------------------------------------
s = "hELlo WoRlD"
print("="*20,"대문자와 소문자","="*20)
print(f"s : {s}")
print("-"*50)
print("s.upper() :",s.upper())
print("s.lower() :",s.lower())
print("s.swapcase() :",s.swapcase())
print("s.title() :",s.title())
print("="*50)
#==============================================================================
print()
#==============================================================================
#                           문자열 찾기
#------------------------------------------------------------------------------
# count() : 찾을 문자열이 몇개인지 반환
# find() : 찾을 문자열의 인덱스 반환 왼쪽부터 검색
# rfind() : 오른쪽 부터 검색해서 인데스 반환
# index() : find()와 동일하지만 찾을수 없으면 에러 발생
# rindex() : rfind()와 동일하지만 찾을수 없으면 에러 발생
# startswith() : 찾을 문자열로 시작하면 Ture 아니면 False 반환
# endswith() : 찾을 문장열로 끝나면 True 아니면 False 반환
#------------------------------------------------------------------------------
s = "hello world"
print("="*20,"문자열 찾기","="*20)
print(f's : {s}')
print("-"*50)
print("s.count('l') :",s.count("l"),"\ts.count('a') :",s.count('a'))
print(f"s.find('l') : {s.find('l')}\t\ts.find('a') : {s.find('a')}")
print(f"s.rfind('l') : {s.rfind('l')}\ts.rfind('a') : {s.rfind('a')}")
print(f"s.index('l') : {s.index('l')}\ts.rindex('l') : {s.rindex('l')}")
print(f"s.startswith('h') : {s.startswith('h')}\ts.startswith('H') : {s.startswith('H')}")
print(f"s.endswith('h') : {s.endswith('d')}\t\ts.endswith('H') : {s.endswith('D')}")
print("="*50)
#==============================================================================
print()
#==============================================================================
#                           공백 제거
#------------------------------------------------------------------------------
# strip() : 양 쪽 공백 제거
# rstrip() : 오른쪽 공백 제거
# lstrip() : 왼쪽 공백 제거
# replace() : 기존 문자열을 새 문자열로 변경
#------------------------------------------------------------------------------
s = "    hello world !    "
print("="*20,"공백 제거","="*20)
print(f's : [{s}]')
print("-"*50)
print(f's.strip() : [{s.strip()}]')
print(f's.rstrip() : [{s.rstrip()}]')
print(f's.lstrip() : [{s.lstrip()}]')
print(f's.replace(" ","") : [{s.replace(" ","")}]')
print(f's.replace(" ","@") : [{s.replace(" ","@")}]')
print(f's.replace("hello","Hi") : [{s.replace("hello","Hi")}]')
print("="*50)
#==============================================================================
print()
#==============================================================================
#                           문자열 분리
#------------------------------------------------------------------------------
# split() : 양 쪽 공백 제거
# join() : 문자열 합치기
#------------------------------------------------------------------------------
s = "apple,banana,lemon,kiwi,mango,melon"
print("="*20,"문자열 분리","="*20)
print(f's : [{s}]')
print("-"*50)
print(f's.split(",") : {s.split(",")}\t\ttype : {type(s.split(","))}')
print(f'" ".join(s) : {" ".join(s)}')
print(f'"*".join(s) : {"@".join(s)}')
print("="*50)
#==============================================================================
print()
#==============================================================================
#                           문자열 구성 파악
#------------------------------------------------------------------------------
# isdigit() : 숫자로만 구성 되어 있는지
# isalpha() : 문자로만 구성 되어 있는지
# isalnum() : 숫자, 문자로 구성 되어 있는지
# islower() : 소문자로만 구성되어 있는지
# isupper() : 대문자로만 구성되어 있는지
# isspace() : 공백으로만 구성 되어 있는지
#------------------------------------------------------------------------------
print("="*20,"문자열 구성 파악","="*20)
print(f'"314".isdigit() : {"314".isdigit()}\t\t"3.14".isdigit() : {"3.14".isdigit()}')
print(f'"abc".isalpha() : {"abc".isalpha()}\t\t"abc!".isalpha() : {"abc!".isalpha()}')
print(f'"12a".isalnum() : {"12a".isalnum()}\t\t"12a@".isalnum() : {"1a@".isalnum()}')
print(f'"1b!".islower() : {"1b!".islower()}\t\t"1aB!".islower() : {"1aB!".islower()}')
print(f'"1B!".isupper() : {"1B!".isupper()}\t\t"1aB!".isupper() : {"1aB!".isupper()}')
print(f'"   ".isspace() : {"   ".isspace()}\t\t" ,  ".isspace() : {" ,  ".isspace()}')
print("="*50)
#==============================================================================