#==============================================================================
# 딕셔너리는 key와 value의 한쌍으로 이루어져 있다
# key는 중복이 불가능하며 value의 중복은 허용된다
# 딕셔너리는 순서가 없어 key값으로 접근을 할수 있다
# 딕셔너리의 항목들은 수정이 가능하다
#==============================================================================


#==============================================================================
#                               딕셔너리 항목
#------------------------------------------------------------------------------
# 변수명[키] = 값 으로 딕셔너리 항목을 추가하거나 수정 할수 있다
# 키값이 중복이면 나중에 들어온 항목으로 변경된다
# 변수명[키] 로 값을 가져올수 있다
#------------------------------------------------------------------------------
d = {'key':"value", 'key':"val"}
print("="*20,"딕셔너리 항목","="*20)
print("d = {'key':'value', 'key':'val'}")
print("d :",d)
print('-'*50)
d['k'] = "v"
print("d['k']='v' :",d)
print("d['key'] :",d['key'])
print('='*50)
#==============================================================================
print()
#==============================================================================
#                               딕셔너리 함수
#------------------------------------------------------------------------------
# get() : 키로 값을 반환, 변수[키] 와 같다
# pop() : 항목 삭제와 반환, 키가 없다면 에러를 내뿜지만 매개변수를 추가로 줌으로써 방지가능
# keys() : key들을 가져온다
# values() : value들을 가져온다
# items() : key와 value를 가져온다
#------------------------------------------------------------------------------
d = {'a':1,'b':2,'c':3,'d':4,'e':5}
print("="*20,"딕셔너리 함수","="*20)
print(f'd : {d}')
print("-"*50)
print(f'd.get("a") :\t\t{d.get("a")}')
i = d.pop('e', None) # 키가 없으면 에러대신 None반환
print(f"d.pop('e', None) :\t{d}\tresult : {i}")
i = d.pop('e', None) # 키가 없으면 에러대신 None반환
print(f"d.pop('e', None) :\t{d}\tresult : {i}")
print(f"d.keys() :\t\t{d.keys()}")
print(f"d.values() :\t\t{d.values()}")
print(f"d.items() :\t\t{d.items()}")
print("="*50)
#==============================================================================