#==============================================================================
# 클래스란 속성과 메소드를 가진다
# 속성은 변수이고 메소드는 함수이다
# 클래스는 객체를 찍어내기 위한 공장이나 틀 혹은 설계도이다
# class 클래스명: 처럼 class키워드를 사용하면 된다
#==============================================================================

#==============================================================================
#                           Car 클래스
#------------------------------------------------------------------------------
# 클래스명은 Car인 클래스이다
# count는 전역변수로써 모든 객체가 동일한 값을 가질수 있다
# __init__과 __del__처럼 언더바(_)가 들어가는 함수는 기능이 정해져있는 함수다
# self키워드는 객체 자기자신을 가르킬때 사용한다
# 메소드에서 단순히 변수명으로만 사용 할 경우
# 객체는 메소드를 실행하고 나서 그 변수를 기억하지 못한다
#------------------------------------------------------------------------------
class Car:
    count = 0
    def __init__(self, color):
        self.color = color
        self.speed = 0
        Car.count += 1
        print(f"객체 생성\t 현재 {Car.count}개의 객체가 존재")
    def speedUp(self, speed=10): #매개변수가 없을시 speed는 기본적으로 10
        self.speed += speed
    def speedDown(self, speed=10): #매개변수가 없을시 speed는 기본적으로 10
        self.speed -= speed
    def __del__(self):
        Car.count -= 1
        print(f"객체 소멸\t 현재 {Car.count}개의 객체가 존재")
        
#==============================================================================

#==============================================================================
#                       클래스 사용
#------------------------------------------------------------------------------
car1 = Car('검정')
car2 = Car('흰색')

print(f'car1의 현재 속도는 {car1.speed}입니다')
car1.speedUp(50)
print(f'car1의 현재 속도는 {car1.speed}입니다')
car1.speedDown()
print(f'car1의 현재 속도는 {car1.speed}입니다')
car2.speedUp(70)
print(f'car2의 현재 속도는 {car2.speed}입니다')
#==============================================================================